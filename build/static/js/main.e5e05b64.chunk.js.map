{"version":3,"sources":["components/ImageLinkForm/iphone.png","components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Ball/Ball.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","className","options","max","style","height","width","ImageLinkForm","onInputChange","onButtonSubmit","alt","src","iphone","Ball","init","refs","ballY","top","props","origin","y","left","x","terminal","transition","console","log","id","setTimeout","fall","transform","ballX","complete","ref","Component","particlesOptions","particles","number","value","density","enable","value_area","App","click","e","ball","timeStamp","termialX","offsetLeft","termialY","offsetTop","originX","pageX","originY","pageY","state","balls","push","setState","input","bind","document","addEventListener","this","forEach","v","i","splice","params","map","key","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e5e05b64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iphone.a87a3a38.png\";","import React from 'react';\nimport Tilt from 'react-tilt';\nimport './Logo.css';\n\nconst Logo = () => {\n\treturn (\n\t\t<div className='pt4 ma4 mt0'>\n\t\t\t<Tilt className=\"Tilt br2 shadow-2\" options={{ max : 75 }} style={{ height: 100, width: 100 }} >\n \t\t\t\t<div className='Tilt-inner white f3 pt3'>BLACK</div>\n\t\t\t</Tilt>\n\t\t</div>\n\t);\n}\n\nexport default Logo;","import React from 'react';\nimport './ImageLinkForm.css';\nimport iphone from './iphone.png';\n\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\n\treturn (\n\t\t<div>\n\t\t\t<p className='f1 b white'>\n\t\t\t\t{'THIRSTY?'}\n\t\t\t</p>\n\t\t\t<div className='center pb3'>\n \t\t\t\t<img alt='iphone' src={iphone} height='600px' />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default ImageLinkForm;","import React,{ Component } from 'react';\nimport './Ball.css';\n\nclass Ball extends Component{\n    init=()=>{\n        this.refs.ballY.style.top=`${this.props.origin.y}px`;\n        this.refs.ballY.style.left=`${this.props.origin.x}px`;\n        if(this.props.origin.y>this.props.terminal.y){\n            this.refs.ballY.style.transition = \"all .4s cubic-bezier(0,.3,.55,1.62)\"\n        }\n        console.log(this.props.id);\n        setTimeout(()=>{\n            this.fall()\n        },0)\n    };\n    fall=()=>{\n        this.refs.ballY.style.transform=`translateY(${this.props.terminal.y-this.props.origin.y}px)`;\n        this.refs.ballX.style.transform=`translateX(${this.props.terminal.x-this.props.origin.x}px)`;\n        setTimeout(()=>{\n            this.props.complete(this.props.id)\n        },400)\n    };\n    render(){\n        return (\n            <div className=\"ball-y\" ref=\"ballY\" >\n                <div className=\"ball-x\" ref=\"ballX\"></div>\n            </div>\n        )\n    }\n}\nexport default Ball;","import React, { Component } from 'react';\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Ball from './components/Ball/Ball';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport 'tachyons';\n\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 100,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }         \n}        \nclass App extends Component {\n  constructor (props){\n    super(props);\n    this.state = {\n      input: '',\n      termialX:\"\",\n      termialY:\"\",\n      originX:\"\",\n      originY:\"\",\n      balls:[]\n    };\n      this.complete = this.complete.bind(this)\n    }\n\n  componentDidMount(){\n      document.addEventListener('click',this.click);\n  }\n\n  click=e=>{\n      let ball = {\n          id: `${e.timeStamp}`,\n          termialX:this.refs.terminal.offsetLeft,\n          termialY:this.refs.terminal.offsetTop,\n          originX:e.pageX,\n          originY:e.pageY\n      };\n      this.state.balls.push(ball);\n      this.setState({},()=>{\n          this.refs.ball.init()\n      })\n\n  };\n  complete(id){\n      this.state.balls.forEach((v,i)=>{\n          if(v.id === id){\n              this.state.balls.splice(i,1);\n              this.setState({});\n              return\n          }\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      <Particles className='particles' params={particlesOptions} />\n      <Logo />\n      <div className=\"terminal\" ref=\"terminal\"></div>\n      {\n        this.state.balls.map(v=>(\n            <Ball ref=\"ball\"\n                  key={v.id}\n                  terminal={{x:v.termialX,y:v.termialY}}\n                  origin={{x:v.originX,y:v.originY}}\n                  id={v.id}\n                  complete={this.complete}\n            />\n        ))\n      }\n      {<ImageLinkForm \n        onInputChange={this.onInputChange} \n        onButtonSubmit={this.onButtonSubmit}\n      />} \n      </div>\n      );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}